apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "com.app.moviedb"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            keyAlias "androiddebugkey"
            keyPassword "android"
            storeFile file('config/debug.keystore')
            storePassword "android"
        }
        release {
            keyAlias "thai"
            keyPassword "123456789"
            storeFile file('config/thai.keystore')
            storePassword "123456789"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            buildConfigField "String", "MOVIE_API_KEY", getMovieApiSecret()
            buildConfigField "String", "MOVIE_BASE_URL", "\"https://api.themoviedb.org/3/\""
            buildConfigField "String", "IMAGE_API_KEY", "\"https://image.tmdb.org/t/p/\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            buildConfigField "String", "MOVIE_API_KEY", getMovieApiSecret()
            buildConfigField "String", "MOVIE_BASE_URL", "\"https://api.themoviedb.org/3/\""
            buildConfigField "String", "IMAGE_API_KEY", "\"https://image.tmdb.org/t/p/\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures.dataBinding = true

//    packagingOptions {
//        exclude 'META-INF/DEPENDENCIES'
//        exclude 'META-INF/LICENSE'
//        exclude 'META-INF/LICENSE.txt'
//        exclude 'META-INF/license.txt'
//        exclude 'META-INF/NOTICE'
//        exclude 'META-INF/NOTICE.txt'
//        exclude 'META-INF/notice.txt'
//        exclude 'META-INF/ASL2.0'
//        exclude("META-INF/*.kotlin_module")
//    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
//    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Architecture Components
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"

    //rx
    implementation "io.reactivex.rxjava2:rxjava:$rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroid"

    //paging
    implementation "androidx.paging:paging-runtime:$paging"
    implementation "androidx.paging:paging-rxjava2:$paging"

    // Co-routines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // DI
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
   
    //gson
    implementation "com.google.code.gson:gson:$gson"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // koin
    implementation "org.koin:koin-android:$koin"
    implementation "org.koin:koin-androidx-viewmodel:$koin"

    // epoxy
    implementation "com.airbnb.android:epoxy:$epoxy"
    implementation "com.airbnb.android:epoxy-databinding:$epoxy"
    implementation "com.airbnb.android:epoxy-paging:$epoxy"
    kapt  "com.airbnb.android:epoxy-processor:$epoxy"

    //testing
    testImplementation "org.koin:koin-test:$koin"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserverVersion"
    testImplementation "android.arch.core:core-testing:$androidArchCoreTesting"
}

Properties getGradleProperties() {
    Properties properties = new Properties()
    def gradlePropertiesFile = project.rootProject.file("gradle.properties")
    if (gradlePropertiesFile.canRead()) {
        properties.load(gradlePropertiesFile.newDataInputStream())
    }
    return properties
}


String getMovieApiSecret() {
    return "\"" + getGradleProperties().getProperty("movieApiSecret") + "\""
}
